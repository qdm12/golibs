// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/golibs/crypto/random/syncpool (interfaces: Rand)

// Package mock_syncpool is a generated GoMock package.
package mock_syncpool

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRand is a mock of Rand interface.
type MockRand struct {
	ctrl     *gomock.Controller
	recorder *MockRandMockRecorder
}

// MockRandMockRecorder is the mock recorder for MockRand.
type MockRandMockRecorder struct {
	mock *MockRand
}

// NewMockRand creates a new mock instance.
func NewMockRand(ctrl *gomock.Controller) *MockRand {
	mock := &MockRand{ctrl: ctrl}
	mock.recorder = &MockRandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRand) EXPECT() *MockRandMockRecorder {
	return m.recorder
}

// Uint32 mocks base method.
func (m *MockRand) Uint32() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uint32")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Uint32 indicates an expected call of Uint32.
func (mr *MockRandMockRecorder) Uint32() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uint32", reflect.TypeOf((*MockRand)(nil).Uint32))
}

// Uint32n mocks base method.
func (m *MockRand) Uint32n(arg0 uint32) uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uint32n", arg0)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Uint32n indicates an expected call of Uint32n.
func (mr *MockRandMockRecorder) Uint32n(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uint32n", reflect.TypeOf((*MockRand)(nil).Uint32n), arg0)
}
