// Code generated by MockGen. DO NOT EDIT.
// Source: golang.org/x/crypto/sha3 (interfaces: ShakeHash)

// Package crypto is a generated GoMock package.
package crypto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sha3 "golang.org/x/crypto/sha3"
)

// MockShakeHash is a mock of ShakeHash interface.
type MockShakeHash struct {
	ctrl     *gomock.Controller
	recorder *MockShakeHashMockRecorder
}

// MockShakeHashMockRecorder is the mock recorder for MockShakeHash.
type MockShakeHashMockRecorder struct {
	mock *MockShakeHash
}

// NewMockShakeHash creates a new mock instance.
func NewMockShakeHash(ctrl *gomock.Controller) *MockShakeHash {
	mock := &MockShakeHash{ctrl: ctrl}
	mock.recorder = &MockShakeHashMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShakeHash) EXPECT() *MockShakeHashMockRecorder {
	return m.recorder
}

// BlockSize mocks base method.
func (m *MockShakeHash) BlockSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// BlockSize indicates an expected call of BlockSize.
func (mr *MockShakeHashMockRecorder) BlockSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockSize", reflect.TypeOf((*MockShakeHash)(nil).BlockSize))
}

// Clone mocks base method.
func (m *MockShakeHash) Clone() sha3.ShakeHash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(sha3.ShakeHash)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockShakeHashMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockShakeHash)(nil).Clone))
}

// Read mocks base method.
func (m *MockShakeHash) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockShakeHashMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockShakeHash)(nil).Read), arg0)
}

// Reset mocks base method.
func (m *MockShakeHash) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockShakeHashMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockShakeHash)(nil).Reset))
}

// Size mocks base method.
func (m *MockShakeHash) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockShakeHashMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockShakeHash)(nil).Size))
}

// Sum mocks base method.
func (m *MockShakeHash) Sum(arg0 []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sum", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Sum indicates an expected call of Sum.
func (mr *MockShakeHashMockRecorder) Sum(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sum", reflect.TypeOf((*MockShakeHash)(nil).Sum), arg0)
}

// Write mocks base method.
func (m *MockShakeHash) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockShakeHashMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockShakeHash)(nil).Write), arg0)
}
