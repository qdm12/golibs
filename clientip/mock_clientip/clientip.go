// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/golibs/clientip (interfaces: Extractor)

// Package mock_clientip is a generated GoMock package.
package mock_clientip

import (
	net "net"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExtractor is a mock of Extractor interface.
type MockExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockExtractorMockRecorder
}

// MockExtractorMockRecorder is the mock recorder for MockExtractor.
type MockExtractorMockRecorder struct {
	mock *MockExtractor
}

// NewMockExtractor creates a new mock instance.
func NewMockExtractor(ctrl *gomock.Controller) *MockExtractor {
	mock := &MockExtractor{ctrl: ctrl}
	mock.recorder = &MockExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtractor) EXPECT() *MockExtractorMockRecorder {
	return m.recorder
}

// HTTPRequest mocks base method.
func (m *MockExtractor) HTTPRequest(arg0 *http.Request) net.IP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPRequest", arg0)
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// HTTPRequest indicates an expected call of HTTPRequest.
func (mr *MockExtractorMockRecorder) HTTPRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPRequest", reflect.TypeOf((*MockExtractor)(nil).HTTPRequest), arg0)
}
