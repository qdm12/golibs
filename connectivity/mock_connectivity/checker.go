// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/golibs/connectivity (interfaces: Checker,SingleChecker)

// Package mock_connectivity is a generated GoMock package.
package mock_connectivity

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChecker is a mock of Checker interface.
type MockChecker struct {
	ctrl     *gomock.Controller
	recorder *MockCheckerMockRecorder
}

// MockCheckerMockRecorder is the mock recorder for MockChecker.
type MockCheckerMockRecorder struct {
	mock *MockChecker
}

// NewMockChecker creates a new mock instance.
func NewMockChecker(ctrl *gomock.Controller) *MockChecker {
	mock := &MockChecker{ctrl: ctrl}
	mock.recorder = &MockCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChecker) EXPECT() *MockCheckerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockChecker) Check(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockCheckerMockRecorder) Check(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockChecker)(nil).Check), arg0, arg1)
}

// ParallelChecks mocks base method.
func (m *MockChecker) ParallelChecks(arg0 context.Context, arg1 []string) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParallelChecks", arg0, arg1)
	ret0, _ := ret[0].([]error)
	return ret0
}

// ParallelChecks indicates an expected call of ParallelChecks.
func (mr *MockCheckerMockRecorder) ParallelChecks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParallelChecks", reflect.TypeOf((*MockChecker)(nil).ParallelChecks), arg0, arg1)
}

// MockSingleChecker is a mock of SingleChecker interface.
type MockSingleChecker struct {
	ctrl     *gomock.Controller
	recorder *MockSingleCheckerMockRecorder
}

// MockSingleCheckerMockRecorder is the mock recorder for MockSingleChecker.
type MockSingleCheckerMockRecorder struct {
	mock *MockSingleChecker
}

// NewMockSingleChecker creates a new mock instance.
func NewMockSingleChecker(ctrl *gomock.Controller) *MockSingleChecker {
	mock := &MockSingleChecker{ctrl: ctrl}
	mock.recorder = &MockSingleCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSingleChecker) EXPECT() *MockSingleCheckerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockSingleChecker) Check(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockSingleCheckerMockRecorder) Check(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSingleChecker)(nil).Check), arg0, arg1)
}
